name: 🚀 CI/CD Pipeline - Build, Test & Deploy

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]

permissions:
  contents: read
  issues: write
  pull-requests: write

env:
  NODE_VERSION: '18.x'
  MYSQL_VERSION: '8.0'

jobs:
  # 🔍 Code Quality & Security Checks
  quality-checks:
    name: 🔍 Quality & Security
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          # cache: 'npm' # Disabled due to missing lock files
          
      - name: 📦 Install Dependencies
        run: |
          npm install
          cd backend && npm install
          cd ../frontend && npm install
          
      - name: 🔍 Lint Backend
        run: cd backend && npm run lint
        
      - name: 🔍 Lint Frontend  
        run: cd frontend && npm run lint
        
      - name: 🛡️ Security Audit
        continue-on-error: true
        run: |
          npm audit --audit-level=moderate || echo "Root audit completed with warnings"
          cd backend && npm audit --audit-level=moderate || echo "Backend audit completed with warnings"
          cd ../frontend && npm audit --audit-level=moderate || echo "Frontend audit completed with warnings"

  # 🏗️ Backend Build & Test
  backend-tests:
    name: 🏗️ Backend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: quality-checks
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: staff_scheduler_test
          MYSQL_USER: scheduler_user
          MYSQL_PASSWORD: scheduler_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
          
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          # cache: 'npm' # Disabled due to missing lock files
          
      - name: 📦 Install Backend Dependencies
        run: cd backend && npm install
        
      - name: 🗄️ Setup Test Database
        run: |
          mysql -h 127.0.0.1 -u root -ptest_password < backend/database/init.sql
          
      - name: 🔧 Build Backend
        run: cd backend && npm run build
        
      - name: 🧪 Run Unit Tests
        env:
          NODE_ENV: test
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_NAME: staff_scheduler_test
          DB_USER: scheduler_user
          DB_PASSWORD: scheduler_password
          JWT_SECRET: test-secret-key-do-not-use-in-production
        run: cd backend && npm test
        
      - name: 🧪 Run Integration Tests
        env:
          NODE_ENV: test
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_NAME: staff_scheduler_test
          DB_USER: scheduler_user
          DB_PASSWORD: scheduler_password
          JWT_SECRET: test-secret-key-do-not-use-in-production
        run: cd backend && npm run test:integration
        
      - name: 📊 Generate Coverage Report
        env:
          NODE_ENV: test
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_NAME: staff_scheduler_test
          DB_USER: scheduler_user
          DB_PASSWORD: scheduler_password
          JWT_SECRET: test-secret-key-do-not-use-in-production
        run: cd backend && npm run test:coverage
        
      - name: 📤 Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

  # 🎨 Frontend Build & Test  
  frontend-tests:
    name: 🎨 Frontend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: quality-checks
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          # cache: 'npm' # Disabled due to missing lock files
          
      - name: 📦 Install Frontend Dependencies
        run: cd frontend && npm install
        
      - name: 🔧 Build Frontend
        run: cd frontend && npm run build
        
      - name: 🧪 Run Unit Tests
        run: cd frontend && npm test -- --coverage --watchAll=false
        
      - name: 🧪 Run E2E Tests
        run: cd frontend && npm run test:e2e
        
      - name: 📤 Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # 🚀 Optimization Algorithm Tests
  optimization-tests:
    name: 🧮 Optimization Tests
    runs-on: ubuntu-latest
    needs: [backend-tests]
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: staff_scheduler_test
          MYSQL_USER: scheduler_user
          MYSQL_PASSWORD: scheduler_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
          
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          # cache: 'npm' # Disabled due to missing lock files
          
      - name: 📦 Install Dependencies
        run: cd backend && npm install
        
      - name: 🗄️ Setup Test Database
        run: |
          mysql -h 127.0.0.1 -u root -ptest_password < backend/database/init.sql
          
      - name: 🧮 Run Optimization Algorithm Tests
        env:
          NODE_ENV: test
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_NAME: staff_scheduler_test
          DB_USER: scheduler_user
          DB_PASSWORD: scheduler_password
          JWT_SECRET: test-secret-key-do-not-use-in-production
          OPTIMIZATION_ENGINE: javascript
          OPTIMIZATION_TIMEOUT: 30000
        run: cd backend && npm run test:optimization
        
      - name: 📊 Performance Benchmarks
        env:
          NODE_ENV: test
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_NAME: staff_scheduler_test
          DB_USER: scheduler_user
          DB_PASSWORD: scheduler_password
          JWT_SECRET: test-secret-key-do-not-use-in-production
        run: cd backend && npm run test:performance

  # 🔧 Build Verification
  build-verification:
    name: 🔧 Production Build
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          # cache: 'npm' # Disabled due to missing lock files
          
      - name: 📦 Install Dependencies
        run: |
          npm install
          cd backend && npm install
          cd ../frontend && npm install
          
      - name: 🔧 Build Backend (Production)
        run: cd backend && npm run build
        
      - name: 🔧 Build Frontend (Production)
        run: cd frontend && npm run build
        
      - name: 🐳 Build Docker Images
        run: |
          docker build -t staffscheduler-backend ./backend
          docker build -t staffscheduler-frontend ./frontend
          
      - name: 🧪 Test Docker Compose
        run: |
          cp .env.example .env
          docker-compose -f docker-compose.yml up -d
          sleep 30
          curl -f http://localhost:3001/api/health || exit 1
          curl -f http://localhost:3000 || exit 1
          docker-compose down

  # 📊 Code Quality Report
  quality-report:
    name: 📊 Quality Report
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, optimization-tests]
    if: always()
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          # cache: 'npm' # Disabled due to missing lock files
          
      - name: 📦 Install Dependencies
        run: |
          cd backend && npm install
          cd ../frontend && npm install
          
      - name: 📊 Generate Quality Report
        run: |
          echo "## 📊 Test Results Summary" >> quality-report.md
          echo "" >> quality-report.md
          echo "### Backend Tests: ${{ needs.backend-tests.result }}" >> quality-report.md
          echo "### Frontend Tests: ${{ needs.frontend-tests.result }}" >> quality-report.md
          echo "### Optimization Tests: ${{ needs.optimization-tests.result }}" >> quality-report.md
          echo "" >> quality-report.md
          echo "Generated on: $(date)" >> quality-report.md
          
      - name: 📝 Comment PR with Results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('quality-report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

  # 🚀 Deploy to Staging (only on main branch)
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-verification]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🚀 Deploy to Staging Environment
        run: |
          echo "🚀 Deploying to staging environment..."
          echo "This would deploy to your staging server"
          # Add your deployment commands here
          
      - name: 🧪 Smoke Tests on Staging
        run: |
          echo "🧪 Running smoke tests on staging..."
          # Add smoke tests for staging environment
          
      - name: 📢 Notify Deployment Success
        if: success()
        run: |
          echo "✅ Deployment to staging successful!"
          # Add notification logic (Slack, email, etc.)

  # 📈 Performance Monitoring
  performance-monitoring:
    name: 📈 Performance Check
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 📈 Performance Monitoring
        run: |
          echo "📈 Running performance checks..."
          # Add performance monitoring commands
          echo "✅ Performance check completed"
